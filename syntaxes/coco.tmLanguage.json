{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "COCO",
    "patterns": [
        {
            "include": "#block_comment"
        },
        {
            "include": "#brackets"
        },
        {
            "include": "#classes"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#contract_name"
        },
        {
            "include": "#emit_invoke"
        },
        {
            "include": "#exceptions"
        },
        {
            "include": "#extended_instructions"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#line_comment"
        },
        {
            "include": "#methods"
        },
        {
            "include": "#mutate"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#storage_modifiers"
        },
        {
            "include": "#storage_types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#superglobals"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "block_comment": {
            "comment": "Block comments",
            "name": "comment.block.coco",
            "begin": "/\\*",
            "end": "\\*/"
        },
        "brackets": {
            "patterns": [
                {
                    "match": "\\{|\\}",
                    "name": "punctuation.other.bracket.curly.coco"
                },
                {
                    "match": "\\(|\\)",
                    "name": "punctuation.other.bracket.round.coco"
                },
                {
                    "match": "\\[|\\]",
                    "name": "punctuation.other.bracket.square.coco"
                }
            ]
        },
        "classes": {
            "patterns": [
                {
                    "match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b(?=\\s*:)\\s*:",
                    "captures": {
                        "1": {
                            "name": "keyword.class.coco"
                        },
                        "2": {
                            "name": "entity.name.class.coco"
                        }
                    }
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "comment": "Numeric",
                    "match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b",
                    "name": "constant.numeric.coco"
                },
                {
                    "comment": "Boolean",
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.coco"
                }
            ]
        },
        "contract_name": {
            "patterns": [
                {
                    "comment": "Contract Name",
                    "match": "(?<=coco)\\s+([a-zA-Z_]\\w*)",
                    "captures": {
                        "1": {
                            "name": "entity.name.contract.coco"
                        }
                    }
                }
            ]
        },
        "emit_invoke": {
            "patterns": [
                {
                    "match": "\\b(emit|invoke)\\b\\s+([A-Za-z_][A-Za-z0-9_!]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.action.coco"
                        },
                        "2": {
                            "name": "entity.name.function.coco"
                        }
                    }
                }
            ]
        },
        "exceptions": {
            "patterns": [
                {
                    "match": "\\b(IntegerOverflow)\\b",
                    "name": "support.type.exception.coco"
                }
            ]
        },
        "extended_instructions": {
            "patterns": [
                {
                    "match": "(?<=\\.)[^.()]+(?=\\([^()]*\\))",
                    "captures": {
                        "0": {
                            "name": "support.function.calling.coco"
                        }
                    }
                },
                {
                    "match": "\\b(?:Get|Set|IsAlpha|IsNumeric|IsLower|IsUpper|HasPrefix|HasSuffix|Contains|Split|Slice|ToLower|ToUpper|ToBytes|Abs)\\b",
                    "name": "support.function.stdlib.coco"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "comment": "Function declarations",
                    "match": "^(func)\\s+(?:(invokable|deployer)\\s+)?(\\w+!?)\\(",
                    "captures": {
                        "1": {
                            "name": "keyword.function.coco"
                        },
                        "2": {
                            "name": "storage.modifier.func.coco"
                        },
                        "3": {
                            "name": "entity.name.function.coco"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.coco",
                    "match": "\\b(if|elif|else|for|break|pass|continue|return|yield)\\b"
                },
                {
                    "name": "keyword.action.coco",
                    "match": "\\b(observe|transfer|throw)\\b"
                },
                {
                    "name": "keyword.exception.coco",
                    "match": "\\b(try|catch)\\b"
                },
                {
                    "name": "keyword.field.coco",
                    "match": "\\b(field)\\b"
                },
                {
                    "name": "keyword.map.coco",
                    "match": "\\b(Map)\\b"
                },
                {
                    "name": "keyword.module.coco",
                    "match": "\\b(coco)\\b"
                },
                {
                    "name": "keyword.var.coco",
                    "match": "\\b(var)\\b"
                },
                {
                    "name": "keyword.state.coco",
                    "match": "\\b(state)\\b"
                },
                {
                    "name": "keyword.builtins.coco",
                    "match": "\\b(Blake2b|Keccak256|len|Sha256)\\b"
                }
            ]
        },
        "line_comment": {
            "comment": "Single-line comment",
            "name": "comment.line.coco",
            "begin": "//",
            "end": "$"
        },
        "methods": {
            "patterns": [
                {
                    "comment": "Method declarations",
                    "match": "\\b(method)\\b\\s+([A-Za-z_][A-Za-z0-9_!]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.method.coco"
                        },
                        "2": {
                            "name": "entity.name.function.coco"
                        }
                    }
                }
            ]
        },
        "mutate": {
            "patterns": [
                {
                    "match": "\\b(mutate)\\b|(<-|->)\\s*|([A-Za-z_][A-Za-z0-9_]*)\\.(State|Sender|Receiver)\\s*",
                    "captures": {
                        "1": {
                            "name": "keyword.mutate.coco"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.coco"
                        },
                        "3": {
                            "name": "entity.name.contract.coco"
                        },
                        "4": {
                            "name": "support.variable.coco"
                        }
                    }
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "(==|!=|<=|>=|<[^<]|>[^>])",
                    "name": "keyword.operator.comparison.coco"
                },
                {
                    "match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|%=)",
                    "name": "keyword.operator.assignment.coco"
                },
                {
                    "match": "\\-\\-",
                    "name": "keyword.operator.decrement.coco"
                },
                {
                    "match": "\\+\\+",
                    "name": "keyword.operator.increment.coco"
                },
                {
                    "match": "(\\+|\\-|\\*|/|%)",
                    "name": "keyword.operator.arithmetic.coco"
                }
            ]
        },
        "storage_types": {
            "patterns": [
                {
                    "name": "storage.type.string.coco",
                    "match": "\\b(String)\\b"
                },
                {
                    "name": "storage.type.address.coco",
                    "match": "\\b(Address)\\b"
                },
                {
                    "name": "storage.type.bool.coco",
                    "match": "\\b(Bool)\\b"
                },
                {
                    "name": "storage.type.byte.coco",
                    "match": "\\b(Bytes)\\b"
                },
                {
                    "name": "storage.type.ptr.coco",
                    "match": "\\b(Ptr)\\b"
                },
                {
                    "name": "storage.type.numeric.coco",
                    "match": "\\b(U64|U256|I64|I256)\\b"
                }
            ]
        },
        "storage_modifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.state.coco",
                    "match": "\\b(persistent|ephemeral)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.coco",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.coco",
                    "match": "\\\\."
                }
            ]
        },
        "superglobals": {
            "patterns": [
                {
                    "name": "support.variable.coco",
                    "match": "\\b(Ixn|Env|Sender|Receiver)\\b"
                }
            ]
        },
        "throw": {
            "patterns": [
                {
                    "match": "\\b(emit|invoke)\\b\\s+([A-Za-z_][A-Za-z0-9_!]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.action.coco"
                        },
                        "2": {
                            "name": "entity.name.function.coco"
                        }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.language.coco",
                    "match": "\\b(self)\\b"
                },
                {
                    "match": "(?<=f\\\\\")([^\\\\\"]*\\\\$\\{.*?\\}|[^\\\\\"]*)\"",
                    "captures": {
                        "2": {
                            "name": "variable.language.coco"
                        }
                    }
                }
            ]
        }
    },
    "scopeName": "source.coco"
}