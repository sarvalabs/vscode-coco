{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "COCO",
    "patterns": [
        {
            "include": "#block_comment"
        },
        {
            "include": "#brackets"
        },
        {
            "include": "#classes"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#contract_name"
        },
        {
            "include": "#endpoints"
        },
        {
            "include": "#exceptions"
        },
        {
            "include": "#extended_instructions"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#line_comment"
        },
        {
            "include": "#methods"
        },
        {
            "include": "#state_access"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#storage_modifiers"
        },
        {
            "include": "#storage_types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#superglobals"
        },
        {
            "include": "#throw"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "block_comment": {
            "comment": "Block comments",
            "name": "comment.block.coco",
            "begin": "/\\*",
            "end": "\\*/"
        },
        "brackets": {
            "patterns": [
                {
                    "match": "\\{|\\}",
                    "name": "punctuation.other.bracket.curly.coco"
                },
                {
                    "match": "\\(|\\)",
                    "name": "punctuation.other.bracket.round.coco"
                },
                {
                    "match": "\\[|\\]",
                    "name": "punctuation.other.bracket.square.coco"
                }
            ]
        },
        "classes": {
            "patterns": [
                {
                    "comment": "Class Declaration",
                    "match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b(?=\\s*:)\\s*:",
                    "captures": {
                        "1": {
                            "name": "keyword.class.coco"
                        },
                        "2": {
                            "name": "entity.name.class.coco"
                        }
                    }
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.declaration.coco",
                    "match": "\\b(const)\\b\\s+((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*,\\s*)*[a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]+\\b)?",
                    "captures": {
                        "1": { 
                            "name": "keyword.const.coco" 
                        },
                        "2": {
                            "name": "variable.other.declaration.coco"
                        },
                        "3": {
                            "name": "storage.type.coco"
                        }
                    }
                },
                {
                    "comment": "Numeric Value Declaration",
                    "match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b",
                    "name": "constant.numeric.coco"
                },
                {
                    "comment": "Boolean Value Declaration",
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.coco"
                }
            ]
        },
        "contract_name": {
            "patterns": [
                {
                    "comment": "Contract Name",
                    "match": "(?<=coco)\\s+([a-zA-Z_]\\w*)",
                    "captures": {
                        "1": {
                            "name": "entity.name.contract.coco"
                        }
                    }
                }
            ]
        },
        "endpoints": {
            "patterns": [
                {
                    "comment": "Callable Endpoints",
                    "match": "^(endpoint)\\s+(invokable|deployer)\\s+(\\w+!?)\\(",
                    "captures": {
                        "1": {
                            "name": "keyword.function.coco"
                        },
                        "2": {
                            "name": "storage.modifier.func.coco"
                        },
                        "3": {
                            "name": "entity.name.function.coco"
                        }
                    }
                }
            ]
        },
        "exceptions": {
            "patterns": [
                {
                    "comment": "Builtin Exceptions",
                    "match": "\\b(IntegerOverflow)\\b",
                    "name": "support.type.exception.coco"
                }
            ]
        },
        "extended_instructions": {
            "patterns": [
                {
                    "comment": "Local Function Calling",
                    "match": "(?<=\\.)[^.()]+(?=\\([^()]*\\))",
                    "captures": {
                        "0": {
                            "name": "support.function.calling.coco"
                        }
                    }
                },
                {
                    "comment": "Stdlib Functions",
                    "match": "\\b(?:Get|Set|IsAlpha|IsNumeric|IsLower|IsUpper|HasPrefix|HasSuffix|Contains|Split|Slice|ToLower|ToUpper|ToBytes|Abs|range)\\b",
                    "name": "support.function.stdlib.coco"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "comment": "Function declarations",
                    "match": "^(func)\\s+(?:()\\s+)?(\\w+!?)\\(",
                    "captures": {
                        "1": {
                            "name": "keyword.function.coco"
                        },
                        "3": {
                            "name": "entity.name.function.coco"
                        }
                    }
                },
                {
                    "comment": "Supporting functions",
                    "match": "\\b(append|popend|merge)\\b(?=\\()",
                    "name": "support.function.builtin.coco"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "comment": "Control Keywords",
                    "name": "keyword.control.coco",
                    "match": "\\b(if|else|for|break|pass|continue|return|yield|from|in)\\b"
                },
                {
                    "comment": "Action Keywords",
                    "name": "keyword.action.coco",
                    "match": "\\b(observe|transfer)\\b"
                },
                {
                    "comment": "Exception Handling",
                    "name": "keyword.exception.coco",
                    "match": "\\b(try|catch)\\b"
                },
                {
                    "comment": "Field Keyword",
                    "name": "keyword.field.coco",
                    "match": "\\b(field)\\b"
                },
                {
                    "comment": "Map Keyword",
                    "name": "keyword.map.coco",
                    "match": "\\b(Map)\\b"
                },
                {
                    "comment": "Coco Keyword",
                    "name": "keyword.module.coco",
                    "match": "\\b(coco)\\b"
                },
                {
                    "comment": "State Keyword",
                    "name": "keyword.state.accessor.coco",
                    "match": "\\b(state)\\b"
                },
                {
                    "comment": "Crypto Builtins",
                    "name": "keyword.builtins.coco",
                    "match": "\\b(blake2b|keccak256|sha256|sigverify)\\b"
                },
                {
                    "comment": "Serial Builtins",
                    "name": "keyword.builtins.coco",
                    "match": "\\b(polorize|depolorize)\\b"
                },
                {
                    "comment": "Special Methods",
                    "name": "keyword.special.coco",
                    "match": "\\b(len|join)\\b"
                }
            ]
        },
        "line_comment": {
            "comment": "Single-line comment",
            "name": "comment.line.coco",
            "begin": "//",
            "end": "$"
        },
        "methods": {
            "patterns": [
                {
                    "comment": "Method declarations",
                    "match": "\\b(method)\\b\\s+([A-Za-z_][A-Za-z0-9_!]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.method.coco"
                        },
                        "2": {
                            "name": "entity.name.function.coco"
                        }
                    }
                }
            ]
        },
        "state_access": {
            "patterns": [
                {
                    "comment": "Open/Closed State Access Statement",
                    "match": "\\b(mutate|observe)\\b|(<-|->)\\s*|([A-Za-z_][A-Za-z0-9_]*)\\.(State|Sender|Receiver)\\s*",
                    "captures": {
                        "1": {
                            "name": "keyword.state.coco"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.coco"
                        },
                        "3": {
                            "name": "entity.name.contract.coco"
                        },
                        "4": {
                            "name": "support.variable.coco"
                        }
                    }
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "comment": "Comparison Operators",
                    "match": "(==|!=|<=|>=|<[^<]|>[^>])",
                    "name": "keyword.operator.comparison.coco"
                },
                {
                    "comment": "AugAssign Operators",
                    "match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|%=)",
                    "name": "keyword.operator.assignment.coco"
                },
                {
                    "comment": "Decrement Operator",
                    "match": "\\-\\-",
                    "name": "keyword.operator.decrement.coco"
                },
                {
                    "comment": "Increment Operator",
                    "match": "\\+\\+",
                    "name": "keyword.operator.increment.coco"
                },
                {
                    "comment": "Arithmetic Operators",
                    "match": "(\\+|\\-|\\*|/|%)",
                    "name": "keyword.operator.arithmetic.coco"
                },
                {
                    "comment": "Logical Operators",
                    "match": "(&&|\\|\\||!)",
                    "name": "keyword.operator.logical.coco"
                },
                {
                    "comment": "Inclusivity Operator",
                    "match": "\\?(?=(?:[^'\"]|\"[^\"]*\"|'[^']*')*$)",
                    "name": "keyword.operator.inclusivity.coco"
                }
            ]
        },
        "storage_types": {
            "patterns": [
                {
                    "comment": "String Value",
                    "name": "storage.type.string.coco",
                    "match": "\\b(String)\\b"
                },
                {
                    "comment": "Address Value",
                    "name": "storage.type.address.coco",
                    "match": "\\b(Address)\\b"
                },
                {
                    "comment": "Boolean Value",
                    "name": "storage.type.bool.coco",
                    "match": "\\b(Bool)\\b"
                },
                {
                    "comment": "Bytes Value",
                    "name": "storage.type.byte.coco",
                    "match": "\\b(Bytes)\\b"
                },
                {
                    "comment": "Pointer Value",
                    "name": "storage.type.ptr.coco",
                    "match": "\\b(Ptr)\\b"
                },
                {
                    "comment": "Numeric Types",
                    "name": "storage.type.numeric.coco",
                    "match": "\\b(U64|U256|I64|I256)\\b"
                }
            ]
        },
        "storage_modifiers": {
            "patterns": [
                {
                    "comment": "State Type Definitions",
                    "name": "storage.modifier.state.coco",
                    "match": "\\b(persistent|ephemeral)\\b"
                }
            ]
        },
        "strings": {
            "comment": "String/Fstring Patterns",
            "name": "string.quoted.other.coco",
            "patterns": [
                {
                    "name": "string.quoted.other.multiline.coco",
                    "begin": "f\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "string.quoted.other.multiline.coco",
                            "begin": "{",
                            "end": "}",
                            "patterns": [
                                {
                                    "include": "source.coco"
                                }
                            ]
                        },
                        {
                            "name": "punctuation.other.bracket.curly.coco",
                            "match": "\\{|\\}"
                        },
                        {
                            "match": "[^\"{\\\\}]+|\\{",
                            "name": "string.quoted.other.multiline.coco"
                        },
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.coco"
                        },
                        {
                            "match": "(?=\")",
                            "name": "string.quoted.other.multiline.coco",
                            "pop": true
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.coco",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.coco",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "superglobals": {
            "patterns": [
                {
                    "comment": "Superglobal Keywords",
                    "name": "support.variable.coco",
                    "match": "\\b(Ixn|Env|Sender|Receiver)\\b"
                }
            ]
        },
        "throw": {
            "patterns": [
                {
                    "comment": "Throw Statement",
                    "name": "throwStatement",
                    "match": "\\b(throw)\\b(\\s+([a-zA-Z_][a-zA-Z0-9_]*))?\\s*(\\(\"[^\"]*\"\\))?",
                    "captures": {
                        "1": {
                            "name": "keyword.action.throw.coco"
                        },
                        "3": {
                            "name": "entity.name.function.coco"
                        },
                        "4": {
                            "name": "string.quoted.double.coco"
                        }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.language.coco",
                    "match": "\\b(self)\\b"
                },
                {
                    "match": "(?<=f\\\\\")([^\\\\\"]*\\\\$\\{.*?\\}|[^\\\\\"]*)\"",
                    "captures": {
                        "2": {
                            "name": "variable.language.coco"
                        }
                    }
                },
                {
                    "comment": "Variable Declaration",
                    "name": "variable.declaration.coco",
                    "match": "\\b(var)\\b\\s+((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*,\\s*)*[a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]+\\b)?",
                    "captures": {
                        "1": {
                            "name": "keyword.var.coco"
                        },
                        "2": {
                            "name": "variable.other.declaration.coco"
                        },
                        "3": {
                            "name": "storage.type.coco"
                        }
                    }
                }
            ]
        }
    },
    "scopeName": "source.coco"
}